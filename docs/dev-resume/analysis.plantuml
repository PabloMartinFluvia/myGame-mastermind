@startuml analysis

class Mastermind #LightGoldenRodYellow {  

    + Mastermind()
    + play()    
}
Mastermind *--> GameView
Mastermind *--> YesNoDialog
Mastermind *--> Game
Mastermind ..> EnumSetUp

class GameView #LightGreen {

    + GameView(game)
    + play()
}
GameView *--> SecretCombinationView
GameView *--> ProposedCombinationView
GameView *--> ResultView
GameView --> Game


class SecretCombinationView #LightGreen {
    + HIDDEN_COLOR
    + COMBINATION_LENGTH
    
    + SecretCombinationView()
    + show()
}
SecretCombinationView ..> Combination

class ProposedCombinationView #LightGreen {
    
    + ProposedCombinationView(game)
    + read()
    + show(attempt)
}
ProposedCombinationView *--> ValidationErrorView
ProposedCombinationView --> Game
ProposedCombinationView ..> ProposedCombination

class ValidationErrorView #LightGreen {

    + MESSAGES
    
    + ValidationErrorView()
    + show(validationError)
}
ValidationErrorView ..> ValidationError
ValidationErrorView ..> Combination
ValidationErrorView ..> IntervalOpenClosed

class ResultView #LightGreen {
    
    + ResultView(game)
    + show(attempt)
}
ResultView --> Game
ResultView ..> Result

class Game #Wheat{
    + MAX_ATTEMPTS

    + Game()
    + addProposed(proposed)
    + countAttempts()  
    + isMaxAttempts()  
    + isWinner()      
    + getResult(index)
    + getProposed(index)        
    + reset()    
}
Game *--> SecretCombination
Game o--> "0..10" ProposedCombination
Game .down.> Result
Game ..> IntervalOpenClosed

class SecretCombination #Wheat{
    
    + SecretCombination()    
    + getResult(proposed)      
    + reset()

}
SecretCombination *-down-> Combination
SecretCombination .down.> ProposedCombination
SecretCombination .down.> Result

class Result #Wheat{
    + winnerCount
    + blacks
    + whites

    + Result(winnerCount, blacks, whites)
    + isWinner()
    + getBlacks()    
    + getWhites()    
}

class Combination #Wheat{
    + VALID_LENGTH
    + VALID_COLORS    
    + colors

    + Combination(colors = [])
    + getValids()
    + getRandomValidColor()
    + isValid()    
    + getValidationError()
    + includes(color)    
    + addColor(color)          
    + getColor(index)
}
Combination .down.> ValidationError
Combination ..> IntervalOpenClosed

enum ValidationError #Wheat{    
    INVALID_LENGTH
    INVALID_COLORS
    REPEATED_COLORS
    NULL

    + isNull()
    + getOrdinal()
}

class ProposedCombination #Wheat{

    + ProposedCombination(colors)
    + isValid()         
    + getValidationError()     
    + getColors()   
}
ProposedCombination *-down-> Combination 



class YesNoDialog #LightGreen {
    + YES
    + NO
    + question
    + answer    

    + YesNoDialog(question)
    + ask()
    + isAffirmative()
}

class EnumSetUp #LightSteelBlue {
    + initEnumSetUp()
    + setUp()
}
EnumSetUp ..> ValidationError

class IntervalOpenClosed #Wheat{
    - max
    - min

    + IntervalOpenClosed(max, min = 0)
    + includes(value)
}

@enduml