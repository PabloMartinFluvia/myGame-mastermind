@startuml analysis

class Mastermind #LightGoldenRodYellow {  

    + initMastermind()
    + play()    
}
Mastermind *--> Game
Mastermind *--> GameView
Mastermind *--> YesNoDialog
Mastermind ..> EnumSetUp

class GameView #LightGreen {

    + initGameView(game)
    + play()
}
note top
Extra coupling:
SecretCombination,
ProposedCombination,
Result
end note
GameView -down-> Game
GameView *--> SecretCombinationView
GameView *--> ProposedCombinationView
GameView *--> ResultView


class SecretCombinationView #LightGreen {
    
    + initSecretCombinationView()
    + show(secret)
}
SecretCombinationView ..> SecretCombination

class ProposedCombinationView #LightGreen {
    
    + initProposedCombinationView()
    + ask()
    + show(proposed)
}
ProposedCombinationView ..> ProposedCombination
ProposedCombinationView ..> ValidationError
ProposedCombinationView ..> ValidationErrorView

class ValidationErrorView #LightGreen {

    - MESSAGES
    
    + show(validationError)
}
ValidationErrorView ..> ValidationError
ValidationErrorView ..> Combination

class ResultView #LightGreen {
    
    + initResultView()
    + show(result)
}
ResultView ..> Result

class Game #Wheat{
    - MAX_ATTEMPTS

    + initGame()
    + addProposed(proposed)
    + isWinner()
    + isMaxAttempts()
    + getProposeds()
    + getSecret()
    + reset()    
}
Game *--> SecretCombination
Game o--> "0..10" ProposedCombination
Game .down.> Result

class SecretCombination #Wheat{
    
    + initSecretCombination()    
    + getResult(proposed)
    + getLength()     

}
SecretCombination *-down-> Combination
SecretCombination .down.> ProposedCombination
SecretCombination .down.> Result
SecretCombination .down.> ValidationError

class Combination #Wheat{
    - VALID_LENGTH
    - VALID_COLORS    
    - colors

    + initCombination(colors)
    + validColorsToString()
    + getRandomValidColor()    
    + addColor(color)
    + containsColor(searched)      
    + getColor(index)
    + getLength()          
    + getValidationError()
    + toString()
}
Combination .down.> ValidationError

enum ValidationError #Wheat{    
    INVALID_LENGTH
    INVALID_COLORS
    REPEATED_COLORS
    NULL

    + isNull()
    + ordinal()
}

class ProposedCombination #Wheat{

    + initProposedCombination(colors)        
    + getValidationError()
    + getColor(index)   
    + toString()   
}
ProposedCombination *-down-> Combination 
ProposedCombination .down.> ValidationError

class Result #Wheat{
    - combinationLength
    - blacks
    - whites

    + initResult(combinationLength, blacks, whites)
    + isWinner()
    + getBlacks()    
    + getWhites()    
}

class YesNoDialog #LightGreen {
    - YES
    - NO
    - question
    - answer    

    + initYesNoDialog(question)
    + ask()
    + isAffirmative()
}

class EnumSetUp #LightSteelBlue {
    + initEnumSetUp()
    + setUp()
}
EnumSetUp ..> ValidationError

@enduml