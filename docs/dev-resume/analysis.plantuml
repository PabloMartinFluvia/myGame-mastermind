@startuml analysis

class Mastermind #LightGoldenRodYellow {  

    + initMastermind()
    + play()    
}
Mastermind *--> GameView
Mastermind *--> YesNoDialog
Mastermind *--> Game
Mastermind ..> EnumSetUp

class GameView #LightGreen {

    + initGameView()
    + play(game)
}
GameView *--> SecretCombinationView
GameView *--> ProposedCombinationView
GameView *--> ResultView
GameView ..> Game


class SecretCombinationView #LightGreen {
    
    + initSecretCombinationView()
    + show(secret)
}
SecretCombinationView ..> SecretCombination

class ProposedCombinationView #LightGreen {
    
    + initProposedCombinationView()
    + ask()
    + show(proposed)
}
ProposedCombinationView *--> ValidationErrorView
ProposedCombinationView ..> ProposedCombination

class ValidationErrorView #LightGreen {

    - MESSAGES
    
    + initValidationErrorView(validColorsMsg)
    + show(validationError)
}
ValidationErrorView ..> ValidationError

class ResultView #LightGreen {
    
    + initResultView()
    + show(result)
}
ResultView ..> Result

class Game #Wheat{
    - MAX_ATTEMPTS

    + initGame()
    + addProposed(proposed)
    + getAttempts()    
    + getProposed(index)
    + getResult(index)
    + isWinner()
    + isMaxAttempts()    
    + getSecret()    
    + reset()    
}
Game *--> SecretCombination
Game o--> "0..10" ProposedCombination
Game .down.> Result

class SecretCombination #Wheat{
    
    + initSecretCombination()    
    + getResult(proposed)
    + getLength()     
    + reset()

}
SecretCombination *-down-> Combination
SecretCombination .down.> ProposedCombination
SecretCombination .down.> Result

class Combination #Wheat{
    - VALID_LENGTH
    - VALID_COLORS    
    - colors

    + initCombination(colors)
    + validColorsToString()
    + getRandomValidColor()
    + isValid()    
    + getValidationError()
    + containsColor(searched)    
    + addColor(color)          
    + getColor(index)
    + getLength()      
    + toString()
}
Combination .down.> ValidationError

enum ValidationError #Wheat{    
    INVALID_LENGTH
    INVALID_COLORS
    REPEATED_COLORS
    NULL

    + isNull()
    + ordinal()
}

class ProposedCombination #Wheat{

    + initProposedCombination(colors)  
    + validColorsToString() 
    + isValid()         
    + getValidationError()
    + getColor(index)   
    + toString()   
}
ProposedCombination *-down-> Combination 

class Result #Wheat{
    - combinationLength
    - blacks
    - whites

    + initResult(combinationLength, blacks, whites)
    + isWinner()
    + getBlacks()    
    + getWhites()    
}

class YesNoDialog #LightGreen {
    - YES
    - NO
    - question
    - answer    

    + initYesNoDialog(question)
    + ask()
    + isAffirmative()
}

class EnumSetUp #LightSteelBlue {
    + initEnumSetUp()
    + setUp()
}
EnumSetUp ..> ValidationError

@enduml